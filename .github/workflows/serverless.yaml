name: Serverless (Terraform)

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        required: true
        type: choice
        options:
          - dev
          - prod

jobs:
  plan:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
      AWS_SESSION_TOKEN: ${{ secrets.aws_session_token }}
      AWS_REGION: ${{ secrets.aws_region }}
      CONFIG_PATH: configs/${{ github.event.inputs.env }}.yaml
    steps:
      - uses: actions/checkout@v3
      - run: echo Using config from $CONFIG_PATH
      - uses: gruntwork-io/terragrunt-action@v2
        with:
          tg_version: 'v0.42.8'
          tf_version: '1.10.3'
          tg_dir: 'serverless/infra'
          tg_command: 'validate'
      - uses: gruntwork-io/terragrunt-action@v2
        with:
          tg_version: 'v0.42.8'
          tf_version: '1.10.3'
          tg_dir: 'serverless/infra'
          tg_command: 'plan'

  apply:
    needs: plan
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
      AWS_SESSION_TOKEN: ${{ secrets.aws_session_token }}
      AWS_REGION: ${{ secrets.aws_region }}
      CONFIG_PATH: configs/${{ github.event.inputs.env }}.yaml
    steps:
      - uses: actions/checkout@v3
      - run: echo Using config from $CONFIG_PATH
      - uses: gruntwork-io/terragrunt-action@v2
        env:
          # Run apt-get inside the container to allow using python in local-exec of terraform
          INPUT_PRE_EXEC_1: |
            apt-get update && \
            apt-get install -y python3 python3-pip && \
            # create or overwrite /usr/bin/python to point at python3
            ln -sf "$(which python3)" /usr/bin/python
        with:
          tg_version: 'v0.42.8'
          tf_version: '1.10.3'
          tg_dir: 'serverless/infra'
          tg_command: 'apply'
